<link rel="stylesheet" href="/css/room.css" />
<div class="container">
  <div class="my-2">
    <label class="fw-bold form-label">รหัสห้องพัก</label>
    <input type="text" class="form-control" disabled value="<%= entries[0].room_id %>" id="room-id">
  </div>

  <%- include('room_edit_form/room_edit_roomnumber_form')  %>

  <div>
    <p class="my-1 fw-bold">
      * หากไม่ทราบว่าห้องพักของท่านตรงกับตัวเลือกไหน โปรดคลิกเพื่อดูรายละเอียด
    </p>
    <p class="my-1 fw-bold">
      * หากห้องพักของท่านไม่ตรงกับตัวเลือกเหล่านี้โปรดเลือกไม่ระบุ
    </p>
  </div>


  <%- include('room_edit_form/room_edit_typeroom_form')  %>
  <%- include('./roomtype-modal-info') %>

  <%- include('room_edit_form/room_edit_bedtype_form')  %>
  <%- include('./bedtype-modal-info') %>


  <%- include('room_edit_form/room_edit_roomview_form')  %>
  <%- include('./roomview-modal-info') %>

  <%- include('room_edit_form/room_edit_specialoptions_form')  %>

  <div class="my-3">
    <h6 class="fw-bold form-label">
      คำอธิบาย - รายละเอียด
    </h6>
    <textarea class="form-control" id="desc-room" rows="12"><%= entries[0].detail  %></textarea>
    <p class="empty-validate" id="validate-descript"></p>
  </div>



  <input type="hidden" id="example-old-delete">
  <input type="hidden" value="<%= entries[0].example_room  %>" id="example-old-value">
  <div class="my-3">
    <h6 class="fw-bold form-label">
      <i class="fa-solid fa-panorama"></i>
      รูปภาพตัวอย่างเดิม
    </h6>
    <div id="example-old-preview" class="example-preview">
      <% example_room=entries[0].example_room.split(',') %>
      <% for(let i=0;i< example_room.length;i++){ %>
      <div class="example-editing">
        <img src="/src/img/example_room/<%=  example_room[i] %>" class="example-imgview"></img>
        <button class="ac-btn img-acout border-radius-12" data-acout="<%= example_room[i] %>">
          <i class="fa-solid fa-xmark"></i>
        </button>
      </div>
      <% } %>
    </div>
  </div>

  <div class="my-3">
    <label for="room-upload" class="ac-btn label-upload bg-violet">
      <i class="fa-solid fa-paperclip"></i>
      อัพโหลดรูปภาพ
      <input type="file" class="input-file" id="room-upload" multiple accept="image/*" />
    </label>

    <h6 class="fw-bold form-label">
      <i class="fa-solid fa-photo-film"></i>
      รูปภาพที่ต้องการอัพโหลด
    </h6>
    <div id="example-group-preview" class="example-preview"></div>
    <p class="empty-validate" id="validate-roomupload"></p>
  </div>

  <button type="button" class="ac-btn bg-blue border-radius-12" id="room-update" data-id="<%= entries[0].room_id  %>">
    อัพเดต
    <i class="fa-regular fa-pen-to-square"></i>
  </button>
</div>

<script>
  $('#room-update').click(() => {
    const formAndValidateData = [{
        name: "number",
        formtype: "text",
        input: [$('[name="room-number"]'), $('[name="building-items"]'), $('[name="building-floor-items"]')],
        validate: $("#validate-roomnumber"),
        isValidate: false,
        msg: "กรุณากรอกหมายเลขห้อง",
      },
      {
        name: "type",
        formtype: "radio",
        input: $('[name="room-type"]'),
        validate: $("#validate-roomtype"),
        msg: "กรุณาเลือกประเภทห้อง",
      },
      {
        name: "bed",
        formtype: "radio",
        input: $('[name="bed-type"]'),
        validate: $("#validate-bedtype"),
        msg: "กรุณาเลือกประเภทเตียง",
      },
      {
        name: "view",
        formtype: "radio",
        input: $('[name="roomview"]'),
        validate: $("#validate-roomview"),
        msg: "กรุณาเลือกประเภทวิวห้อง",
      },
      {
        name: "special-options",
        formtype: "checkbox",
        input: $('[name="special-options"]'),
        validate: $("#validate-options"),
        msg: "กรุณาเลือกอย่างน้อย 1 ตัวเลือก",
      },
      {
        name: "detail",
        formtype: "text-area",
        input: $('#desc-room'),
        validate: $("#validate-descript"),
        msg: "กรุณาป้อนรายละเอียด และคำอธิบาย",
      },
      {
        name: "exampleroom",
        formtype: "file",
        input: [$('#example-old-value'), $("#room-upload"), $('#example-old-delete')],
        validate: $("#validate-roomupload"),
        msg: "กรุณาอัพโหลดรูปภาพตัวอย่างห้อง",
      },
    ];

    let emptyCount = 0;
    formAndValidateData.forEach((fd) => {
      const {
        formtype,
        validate,
        msg,
        name
      } = fd;

      if (name == "number") {
        const [numberroom, building, buildingFloor] = fd.input
        let emptyNumberroom = []
        let emptyBuilding = []
        let emptyBuildingFloor = []

        let emptyItem = []
        const mapnumber = $.map(numberroom, (e, i) => $(e).val().trim())
        const mapbuilding = $.map(building, (e, i) => $(e).val().trim())
        const mapbuildingFloor = $.map(buildingFloor, (e, i) => $(e).val().trim())
        for (let i = 0; i < mapnumber.length; i++) {

          const n = mapnumber[i]
          const b = mapbuilding[i]
          const bf = mapbuildingFloor[i]

          if (i == 0) {
            if (n == '' || b == '' || bf == '') {
              emptyItem.push(false)
            } else if (n != '' && b != '' && bf != '') {
              emptyItem.push(true)
            }
          } else {
            if (n == '' && b == '' && bf == '') {
              emptyItem.push(true)
            } else if (n != '' && b != '' && bf != '') {
              emptyItem.push(true)
            } else {
              emptyItem.push(false)
            }
          }
        }
        const issetItemsCount = emptyItem.filter((v, i) => v == true).length
        if (issetItemsCount == 0) {
          fd.isValidate = false
          emptyCount++
          validateformEmpty(true, validate, 'กรุณากรอกข้อมูลอย่างน้อย 1 รายการ');
        }

        if (issetItemsCount >= 1) {
          if (emptyItem.includes(false) == true) {
            fd.isValidate = false
            emptyCount++
            validateformEmpty(true, validate, 'กรุณากรอกข้อมูลให้ครบ');
          } else {
            fd.isValidate = true
            validateformEmpty(false, validate, '');
          }
        }
      }
      // ตรวจสอบการเลือกอย่างน้อย 1 ค่า ถ้าเลือกอื่น ต้องกรอกข้อมูลเข้าไปเพิ่มก่อน
      if (formtype == "text-area") {
        const v = fd.input.val().trim()
        if (v == '') {
          emptyCount++;
          validateformEmpty(true, validate, msg);
        } else {
          validateformEmpty(false, validate, "");
        }
      }
      // ตรวจสอบข้อมูลที่มีการเลือกอย่างน้อย 1 ค่า
      if (formtype == "radio" || formtype == "checkbox") {
        const ckedCount = fd.input.filter(":checked").length;
        if (ckedCount == 0) {
          emptyCount++;
          validateformEmpty(true, validate, msg);
        } else if (ckedCount == 1) {
          validateformEmpty(false, validate, "");
        }
      }

      // ตรวจสอบข้อมูลที่เป็นไฟล์
      if (formtype == "file") {
        const fileOldValue = fd.input[0].val().trim();
        const fileCount = fd.input[1][0].files.length;

        if (fileOldValue == '' && fileCount == 0) {
          emptyCount++;
          validateformEmpty(true, validate, msg);
        } else {
          validateformEmpty(false, validate, msg);
        }
      }
    });
    if (emptyCount > 0) {
      if (!isUniqueRoom) {
        validateformEmpty(true, $("#validate-roomnumber"), 'ไม่สามารถใช้หมายเลขนี้ได้ เนื่องจากอาคารนี้ใช้หมายเลขนี้แล้ว')
      } else {
        if (!formAndValidateData[0].isValidate) {
          validateformEmpty(true, $("#validate-roomnumber"), 'กรุณากรอกข้อมูลให้ครบ')
        } else {
          validateformEmpty(false, $("#validate-roomnumber"), '')
        }
      }
    }

    const roomNumberId = $.map($('[name="room-number"]'), (element, i) => $(element).attr('data-numberId'))

    if (emptyCount == 0) {
      if (isUniqueRoom) {
        const fd = new FormData();
        const fdExampleRoom = formAndValidateData[6].input[1][0].files;

        const mapnumberAppend = $.map(formAndValidateData[0].input[0], function(e, i) {
          if ($(e).val() != '') {
            return $(e).val()
          }
        })
        const mapbuildingAppend = $.map(formAndValidateData[0].input[1], function(e, i) {
          if ($(e).val() != '') {
            return $(e).val()
          }
        })
        const mapbuildingFloorAppend = $.map(formAndValidateData[0].input[2], function(e, i) {
          if ($(e).val() != '') {
            return $(e).val()
          }
        })


        let mapspecialOtions = $.map($('[name="special-options"]').filter(":checked"), (v, i) => $(v).val())

        fd.append('room_number_id', JSON.stringify(roomNumberId))
        fd.append('room_number', JSON.stringify(mapnumberAppend))
        fd.append('building', JSON.stringify(mapbuildingAppend))
        fd.append('building_floor', JSON.stringify(mapbuildingFloorAppend))
        fd.append("room_type", formAndValidateData[1].input.filter(':checked').val());
        fd.append("bed_type", formAndValidateData[2].input.filter(':checked').val());
        fd.append("room_view", formAndValidateData[3].input.filter(':checked').val());
        fd.append("special_options", mapspecialOtions.join(","));
        fd.append('room_id', $('#room-id').val())

        fd.append('old_example', formAndValidateData[6].input[0].val())
        fd.append('old_example_delete', formAndValidateData[6].input[2].val())

        for (let i = 0; i < fdExampleRoom.length; i++) {
          const example = fdExampleRoom[i];
          fd.append("example", example);
        }
        fd.append("detail", $('#desc-room').val());

        axios({
            method: "post",
            url: "/api/update-room",
            headers: {
              "Content-Type": "multipart/form-data",
            },
            data: fd,
          })
          .then((res) => {
            const result = res.data.result

            if (result) {
              querySuccess('แก้ไขข้อมูลสำเร็จ', 1000)

            }

            if (!result) {
              queryFail('แก้ไขข้อมูลห้องพัก', 'เกิดข้อผิดพลาดไม่สามารถแก้ไขข้อมูลได้', res.data.err)
            }
          })
          .catch((err) => {
            statusErr()
          });
      }
    }
  });

  window.addEventListener('load', () => {
    activeroomType()
    activebedType()
    activeroomView()
    activeSpecialOption()
  })


  $('.img-acout').click(function() {
    $(this).parent().remove()
    const v = $(this).attr('data-acout')
    const exampleOldValue = $('#example-old-value')
    const exampleOldDelete = $('#example-old-delete')
    const exampleOld = exampleOldValue.val().split(',')
    const exampleOfterDelete = exampleOld.filter((e) => e != v)
    let exampleDelete = exampleOldDelete.val().split(',')

    if (exampleOldDelete.val() == '') {
      exampleDelete = []
    } else if (exampleOldDelete.val() != '') {
      exampleDelete = exampleOldDelete.val().split(',')
    }

    exampleDelete.push(v)
    exampleOldDelete.val(exampleDelete.join(','))

    if (exampleOfterDelete.length == 0) {
      exampleOldValue.val('')
    } else if (exampleOfterDelete.length > 0) {
      exampleOldValue.val(exampleOfterDelete.join(','))
    }

  })


  $('[name="special-options"]').change(function() {
    const specialOptions = $('[name="special-options"]')
    const opt = $(this).val().trim();

    if (opt == "non-special-options") {
      for (let i = 0; i < specialOptions.length; i++) {
        const checkItem = $(specialOptions[i]);
        if (checkItem.val().trim() != "non-special-options") {
          $(checkItem).prop("checked", false);
        }
      }
    } else {
      const index = $.map(specialOptions, (e) => $(e).val()).indexOf("non-special-options");
      specialOptions.filter(`:eq(${index})`).prop('checked', false)
    }
  });

  $('#room-upload').change(function(e) {
    const file = e.target.files;
    let imgItem = ``;
    for (let i = 0; i < file.length; i++) {
      const src = URL.createObjectURL(file[i]);
      const img = `<img src="${src}" class="example-imgview ">`;
      imgItem += img;
    }
    $("#example-group-preview").html(imgItem);
  });

  
function activeroomType() {
    const roomType = $('[name="room-type"]')
    const rt = $('#roomtype-value').val()
    const mapRoomtype = $.map(roomType, (e, i) => $(e).val())
    const includeItem = mapRoomtype.includes(rt)
    if (includeItem == true) {
        for (let i = 0; i < roomType.length; i++) {
            const item = $(roomType[i])
            const v = item.val()
            if (rt == v) {
                item.prop('checked', true)
            }
        }
    } else {
        $(roomType[roomType.length - 1]).prop('checked', true)
        txtOtherroom.val(rt)
        txtOtherroom.prop('disabled', false)
    }

}


function activebedType() {
    const bedType = $('[name="bed-type"]')
    const bed = $('#bedtype-value').val()
    const mapBedtype = $.map(bedType, (e, i) => $(e).val())
    const includeItem = mapBedtype.includes(bed)
    if (includeItem == true) {
        for (let i = 0; i < bedType.length; i++) {
            const item = $(bedType[i])
            const v = item.val()
            if (bed == v) {
                item.prop('checked', true)
            }
        }
    } else {
        $(bedType[bedType.length - 1]).prop('checked', true)
        txtOtherbed.val(bed)
        txtOtherbed.prop('disabled', false)
    }
}

function activeroomView() {
    const roomView = $('[name="roomview"]')
    const view = $('#roomview-value').val()
    const mapView = $.map(roomView, (e, i) => $(e).val())
    const includeItem = mapView.includes(view)
    if (includeItem == true) {
        for (let i = 0; i < roomView.length; i++) {
            const item = $(roomView[i])
            const v = item.val()
            if (view == v) {
                item.prop('checked', true)
            }
        }
    } else {
        $(roomView[roomView.length - 1]).prop('checked', true)
        txtOtherView.val(view)
        txtOtherView.prop('disabled', false)
    }
}

function activeSpecialOption() {
    const specialOptions = $('[name="special-options"]')
    const opt = $('#specialoptions-value').val().split(',')
    let indexFind = []
    const mapOption = $.map(specialOptions, (e, i) => $(e).val())

    opt.forEach((e) => {
        const index = mapOption.indexOf(e)
        if (index >= 0) {
            indexFind.push(index)
            $(specialOptions[index]).prop('checked', true)
        } else if (index < 0) {
            $(specialOptions[specialOptions.length - 1]).prop('checked', true)
            if ($(specialOptions[specialOptions.length - 1]).is(':checked') == true) {
                txtSpecialOptions.prop('disabled', false)
                txtSpecialOptions.val(e)
            }
        }
    })

}
</script>